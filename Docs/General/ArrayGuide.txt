
Array Operations in C#

======================================
1. What is an Array?
======================================
An array in C# is a collection of elements of the same type that are stored in a contiguous memory location. 
Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.

======================================
2. Declaring and Initializing an Array:
======================================
You can declare and initialize an array using the following syntax:

// Declaration
int[] myArray;

// Initialization
myArray = new int[5]; // Array of 5 integers

// Declaration and Initialization in one step
int[] myArray = new int[5];

You can also initialize an array with values directly:

int[] myArray = { 1, 2, 3, 4, 5 };

======================================
3. Accessing Array Elements:
======================================
Array elements can be accessed using their index, starting from 0:

int firstElement = myArray[0]; // Accesses the first element
int lastElement = myArray[myArray.Length - 1]; // Accesses the last element

**Note:** Attempting to access an index outside the array’s bounds will throw an `IndexOutOfRangeException`.

======================================
4. Modifying Array Elements:
======================================
You can modify elements in an array by assigning a new value to a specific index:

myArray[0] = 10; // Sets the first element to 10
myArray[4] = 50; // Sets the last element to 50

======================================
5. Iterating Over an Array:
======================================
You can iterate over an array using a `for` loop or a `foreach` loop:

// Using a for loop
for (int i = 0; i < myArray.Length; i++) {
    Console.WriteLine(myArray[i]);
}

// Using a foreach loop
foreach (int element in myArray) {
    Console.WriteLine(element);
}

======================================
6. Array Length:
======================================
You can find the number of elements in an array using the `Length` property:

int length = myArray.Length;
Console.WriteLine("Array Length: " + length);

======================================
7. Multi-Dimensional Arrays:
======================================
C# supports multi-dimensional arrays. A two-dimensional array (matrix) can be declared and initialized as follows:

int[,] matrix = new int[3, 2]; // 3 rows and 2 columns

// Initialization with values
int[,] matrix = { { 1, 2 }, { 3, 4 }, { 5, 6 } };

You can access and modify elements in a multi-dimensional array using two indices:

int value = matrix[0, 1]; // Accesses the element in the first row, second column
matrix[1, 0] = 10; // Modifies the element in the second row, first column

======================================
8. Jagged Arrays:
======================================
A jagged array is an array of arrays, where the inner arrays can have different lengths:

int[][] jaggedArray = new int[3][]; // Array of 3 arrays
jaggedArray[0] = new int[2]; // First array with 2 elements
jaggedArray[1] = new int[3]; // Second array with 3 elements
jaggedArray[2] = new int[4]; // Third array with 4 elements

// Initializing with values
int[][] jaggedArray = {
    new int[] { 1, 2 },
    new int[] { 3, 4, 5 },
    new int[] { 6, 7, 8, 9 }
};

// Accessing elements
int value = jaggedArray[1][2]; // Accesses the third element of the second array

======================================
9. Sorting an Array:
======================================
You can sort an array using the `Array.Sort()` method:

int[] numbers = { 3, 1, 4, 1, 5, 9 };
Array.Sort(numbers); // Sorts the array in ascending order

foreach (int number in numbers) {
    Console.WriteLine(number); // Output: 1, 1, 3, 4, 5, 9

======================================
10. Reversing an Array:
======================================
You can reverse the elements in an array using the `Array.Reverse()` method:

int[] numbers = { 1, 2, 3, 4, 5 };
Array.Reverse(numbers); // Reverses the array

foreach (int number in numbers) {
    Console.WriteLine(number); // Output: 5, 4, 3, 2, 1
}

======================================
11. Searching for an Element:
======================================
You can search for an element in an array using the `Array.IndexOf()` method:

int[] numbers = { 1, 2, 3, 4, 5 };
int index = Array.IndexOf(numbers, 3); // Finds the index of the value 3

Console.WriteLine("Index of 3: " + index); // Output: 2

If the element is not found, `Array.IndexOf()` returns `-1`.

======================================
12. Copying an Array:
======================================
You can copy elements from one array to another using the `Array.Copy()` method:

int[] sourceArray = { 1, 2, 3, 4, 5 };
int[] destinationArray = new int[5];

Array.Copy(sourceArray, destinationArray, sourceArray.Length);

foreach (int element in destinationArray) {
    Console.WriteLine(element); // Output: 1, 2, 3, 4, 5
}

======================================
13. Clearing an Array:
======================================
You can clear all the elements in an array using the `Array.Clear()` method:

int[] numbers = { 1, 2, 3, 4, 5 };
Array.Clear(numbers, 0, numbers.Length); // Sets all elements to zero

foreach (int number in numbers) {
    Console.WriteLine(number); // Output: 0, 0, 0, 0, 0
}

======================================
14. Resizing an Array:
======================================
You can resize an array using the `Array.Resize()` method, which changes the size of the array while preserving existing elements:

int[] numbers = { 1, 2, 3 };
Array.Resize(ref numbers, 5); // Resizes the array to 5 elements

numbers[3] = 4; // Adding new elements
numbers[4] = 5;

foreach (int number in numbers) {
    Console.WriteLine(number); // Output: 1, 2, 3, 4, 5
}

**Note:** Resizing an array creates a new array and copies the elements from the old array.

======================================
End of Array Operations Guide
======================================
